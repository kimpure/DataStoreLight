var React = require('react')
var ReactDOM = require('react-dom')
var ref = require('tiny-atom/react');
var ProvideAtom = ref.ProvideAtom;
var ConnectAtom = ref.ConnectAtom;
var ref$1 = require('./moonwave');
var moonwave = ref$1.moonwave;

function reactMoonwave (options) {
  var app = moonwave(options)
  app.render(render)
  app.unrender(unrender)
  return app
}

/**
 * Get the current route,
 * get the associated components,
 * render them in a nested fashion
 * and finally render the app into DOM
 */
var render = function (app) { return function (atom) {
  var router = app.router;
  var options = app.options;
  var route = atom.get().route
  var components = router.data(route.pattern).map(function (c) { return c.Component ? c.Component : c; })
  var App = components.reduceRight(function (children, Component) { return (
    React.createElement( Component, { state: atom.get(), split: atom.split, route: route }, children)
  ); }, null)
  ReactDOM.render((
    React.createElement( ProvideRouter, { router: router },
      React.createElement( ProvideAtom, { atom: atom },
        App
      )
    )
  ), options.root)
}; }

/**
 * Overwrite the target DOM element with nothing
 */
var unrender = function (app) {
  ReactDOM.render(null, app.options.root)
}

/**
 * It's useful to provide the router via context in case
 * someone wants to utilise router's functions such as
 * router.href()
 */
var ProvideRouter = (function (superclass) {
  function ProvideRouter () {
    superclass.apply(this, arguments);
  }

  if ( superclass ) ProvideRouter.__proto__ = superclass;
  ProvideRouter.prototype = Object.create( superclass && superclass.prototype );
  ProvideRouter.prototype.constructor = ProvideRouter;

  ProvideRouter.prototype.getChildContext = function getChildContext () {
    return {
      router: this.props.router
    }
  };

  ProvideRouter.prototype.render = function render () {
    return React.Children.only(this.props.children)
  };

  return ProvideRouter;
}(React.Component));

ProvideRouter.childContextTypes = {
  router: propsValidation
}

function propsValidation (props, propName, componentName) {
  if (typeof props === 'object') {
    return null
  }
  return new Error('Invalid prop ' + propName + ' supplied to componentName')
}

module.exports = { moonwave: reactMoonwave, ProvideAtom: ProvideAtom, ConnectAtom: ConnectAtom, ProvideRouter: ProvideRouter }
